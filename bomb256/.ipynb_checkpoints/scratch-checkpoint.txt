phase 3 
-uses your input value to jump to line after first compare
-switch case (hint)
phase 4 recursion (hint)
 -storing upper bound and lower bound and sub to find middle
 -user input jump if above (unsigned)
 -returned value to be 4?
 
 phase 5 string length of 6 (hint)
 -$rip with offset is a GLOBAL variable
 -(%rsi,%rdx,4)== ecx=ecx +rsi[rdx]
 -array of char not INT
 
 
 phase 4 inputting 85 in rdx and 44 in rcx
 rsi looking for %d %d input looks like
 scanf jumping to rip address that has hex 0xa6 or dec -90
 checks if at least 2 arguments
 edi actually holds the original across all the calls
 looks like 2 args and 1 should be below threshold for first compare and second has to be 27
 actually in func4 for phase_4
 -it seems to half, shr bit, the first input
 -checks if above or below, unsigned, with the input
 -adds one before calling function again
 -adds back return value to iteself as it comes out
 -so final needs to be 27 and under 14 to start so tried 9 as a multiple of 27 and worked

1: $rdi
2: $rsi
3: $rdx
4: $rcx
5: $ebx
6: $rbx+0x1
7: x/i $rsp
8: $eax


Phase 5 inputting "Hello World!"
-trying "Hello!" -nope on both accounts
-storing in rsi from 5-> 32 adding rip+0x16ec is 32
-so have to look at maybe a total value it's wanting from the string?
-hint given was wrong, mine wanted two decimals, scanf param
  -lost like 3 hours on that premise
-looks like two decimal inputs and seems to be like a do while
-array?== 10,2,14,6,7,8,12,15,11,0,4,1,13,3,9,6,5
-adding array to counter and comparing with 0xf "15"
RDI, RSI, RDX, R10, R8 and R9
-jumps around maybe a queue array?


tried a few combinations
7 -1, 14 -12, etc
finally found the right starting point to give me the full 15 loops it required as it went it added up the values pulled from the array to a total of 115 which was the other value it checked

1: $eax = 15
2: $ecx = 115
3: $edx = 15

phase_6 no hint given
first glance looks like a while loop
-checks a return then executes some code
-checks loop 5 times
-checks loop with 6
 -perhaps a nested loop?

so starts allocating 0x58 "88 bytes" on stack (fairly large)
loads address of my input from 0x30(%rsp) into %r12
moves to $rsi register
then reads if there are six number func
%rax/%eax is used for return of that
then jump to line 69 entry to loop
numbers can't be the same input, compares each entry with beg
first number needs to start with at least 6 or exactly?
$r12 and $rbp are the counts




